{"version":3,"file":"component---src-templates-tag-tsx-b2ba8d15194e325de41d.js","mappings":"+JA8BA,MAhBK,EAAGA,SAAQC,cAEZC,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKC,UCd8B,ODehCH,EACCE,EAAAA,cAAAA,MAAAA,CAAKC,UAAW,kCAAmEC,MAAO,CAAEC,gBAAkB,OAAML,OACjHC,GAGHC,EAAAA,cAAAA,MAAAA,CAAKC,UAAW,4CAA6EF,I,+EEnBhG,MAAMK,EAGR,EAAGC,OAAMC,aAAc,IAAD,EACzB,OACEN,EAAAA,cAAAA,MAAAA,CAAKC,UCPU,ODQbD,EAAAA,cAAAA,MAAAA,CAAKC,UCTW,QDUZI,SAAW,QAAP,EAAJA,EAAME,aAAK,WAAP,EAAJC,EAAaC,OAAsBC,KAAI,CAACC,EAAiBC,IAClDZ,EAAAA,cAACa,EAAAA,EAAQ,CAACF,KAAMA,EAAMC,EAAGA,EAAGE,IAAKF,EAAGN,OAAQA,OAGnD,C,oFEPV,MAAMS,EAAU,EAAGV,WACjB,MAAM,cAAEW,IAAkBC,EAAAA,EAAAA,KAC1B,OACEjB,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,uBAChBD,EAAAA,cAACkB,EAAAA,EAAgB,CAACpB,OAAQO,EAAKc,IAAIC,MAAMC,gBAAgBC,gBAAgBC,OAAOC,SAASC,KACvFzB,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,6BACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,cAAce,EAAe,QAAOX,EAAKc,IAAIO,iBAC3D1B,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,oBACVI,EAAKc,IAAIQ,aAAeX,EAAe,QAAOX,EAAKc,IAAIO,gBACtD,mBACErB,EAAKE,MAAME,MAAMmB,OAAS,IAAkC,IAA5BvB,EAAKE,MAAME,MAAMmB,OAAgB,SAAW,GAAEvB,EAAKE,MAAME,MAAMmB,iBAAqB,aAKxH,EAab,UAV0D,EAAGvB,UAEzDL,EAAAA,cAAC6B,EAAAA,EAAM,CAACC,SAAS,MAAMzB,KAAMA,EAAM0B,OAAQ/B,EAAAA,cAACe,EAAO,CAACV,KAAMA,KACxDL,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,SACbD,EAAAA,cAACI,EAAAA,EAAQ,CAACC,KAAMA,K","sources":["webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.tsx","webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.module.scss","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.tsx","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.module.scss","webpack://ghost-casper/./src/templates/tag.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport * as styles from './HeaderBackground.module.scss';\n\n//import * as PropTypes from 'prop-types';\n\n/* const BackgroundSheet = styled.div`\n  background-color: #000;\n`; */\n\nconst HeaderBackground: React.FC<{\n  srcImg?: string;\n  alt?: string;\n  children?: React.ReactNode;\n}> = ({ srcImg, children }) => {\n  return (\n    <>\n      <div className={styles.siteHeaderBackgroundWrapper}>\n        {srcImg ? (\n          <div className={'outer responsive-header-img' + ' ' + styles.siteHeaderBackground} style={{ backgroundImage: `url(${srcImg})` }}>\n            {children}\n          </div>\n        ) : (\n          <div className={'outer responsive-header-img no-image' + ' ' + styles.siteHeaderBackground}>{children}</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default HeaderBackground;\n\n/*\nHeaderBackground.propTypes = {\n  fluidImg: PropTypes.object,\n  srcImg: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}; */\n","// extracted by mini-css-extract-plugin\nexport var noImage = \"j_S\";\nexport var siteHeaderBackground = \"j_Q\";\nexport var siteHeaderBackgroundWrapper = \"j_R\";","import * as React from 'react';\nimport PostCard from '../PostCard/PostCard';\nimport * as styles from './PostFeed.module.scss';\n\nexport const PostFeed: React.FC<{\n  data: Queries.IndexQuery | Queries.NotFoundQuery | Queries.AuthorQuery | Queries.TagQuery;\n  isHome?: boolean;\n}> = ({ data, isHome }) => {\n  return (\n    <div className={styles.posts}>\n      <div className={styles.postFeed}>\n        {(data?.posts?.nodes as Post_Type[]).map((post: Post_Type, i: number) => {\n          return <PostCard post={post} i={i} key={i} isHome={isHome} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var postFeed = \"g_y\";\nexport var posts = \"g_x\";","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport Layout from '~src/components/Layout/Layout';\n\nimport HeaderBackground from '~src/components/Layout/Header/HeaderBackground';\nimport { PostFeed } from '~src/components/Sections/PostFeed/PostFeed';\n\nconst TagHero = ({ data }) => {\n  const { formatMessage } = useIntlHelper();\n  return (\n    <header className=\"site-archive-header\">\n      <HeaderBackground srcImg={data.tag.image.childImageSharp.gatsbyImageData.images.fallback.src}>\n        <div className=\"inner site-header-content\">\n          <h1 className=\"site-title\">{formatMessage(`tags.${data.tag.yamlId}.title`)}</h1>\n          <h2 className=\"site-description\">\n            {(data.tag.description && formatMessage(`tags.${data.tag.yamlId}.desc`)) ||\n              `A collection of ${\n                (data.posts.nodes.length > 0 && (data.posts.nodes.length === 1 ? `1 post` : `${data.posts.nodes.length} posts`)) || `posts`\n              }`}\n          </h2>\n        </div>\n      </HeaderBackground>\n    </header>\n  );\n};\nconst TagTemplate: React.FC<{ data: Queries.TagQuery }> = ({ data }) => {\n  return (\n    <Layout template=\"tag\" data={data} header={<TagHero data={data} />}>\n      <div className=\"inner\">\n        <PostFeed data={data} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const TagTemplateQuery = graphql`\n  query Tag($id: String!, $locale: String!) {\n    tag: tagsYaml(yamlId: { eq: $id }) {\n      yamlId\n      description\n      image {\n        childImageSharp {\n          gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n        }\n      }\n    }\n    posts: allMdx(filter: { fields: { locale: { eq: $locale } }, frontmatter: { tags: { in: [$id] } } }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\")\n          title\n          tags\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n            }\n          }\n          authors {\n            yamlId\n            avatar {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n              }\n            }\n          }\n        }\n\n        excerpt(pruneLength: 200)\n        timeToRead\n      }\n    }\n  }\n`;\n"],"names":["srcImg","children","React","className","style","backgroundImage","PostFeed","data","isHome","posts","_data$posts","nodes","map","post","i","PostCard","key","TagHero","formatMessage","useIntlHelper","HeaderBackground","tag","image","childImageSharp","gatsbyImageData","images","fallback","src","yamlId","description","length","Layout","template","header"],"sourceRoot":""}