{"version":3,"file":"component---src-pages-index-tsx-a3a5071172a8c4c38fc5.js","mappings":"+JA8BA,MAhBK,EAAGA,SAAQC,cAEZC,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKC,UCd8B,ODehCH,EACCE,EAAAA,cAAAA,MAAAA,CAAKC,UAAW,kCAAmEC,MAAO,CAAEC,gBAAkB,OAAML,OACjHC,GAGHC,EAAAA,cAAAA,MAAAA,CAAKC,UAAW,4CAA6EF,I,+EEnBhG,MAAMK,EAGR,EAAGC,OAAMC,aAAc,IAAD,EACzB,OACEN,EAAAA,cAAAA,MAAAA,CAAKC,UCPU,ODQbD,EAAAA,cAAAA,MAAAA,CAAKC,UCTW,QDUZI,SAAW,QAAP,EAAJA,EAAME,aAAK,WAAP,EAAJC,EAAaC,OAAsBC,KAAI,CAACC,EAAiBC,IAClDZ,EAAAA,cAACa,EAAAA,EAAQ,CAACF,KAAMA,EAAMC,EAAGA,EAAGE,IAAKF,EAAGN,OAAQA,OAGnD,C,uJEfV,EAAe,IAA0B,gECezC,MAAMS,EAAY,KAChB,MAAM,cAAEC,IAAkBC,EAAAA,EAAAA,KACpBC,EAAO,CACXC,MAAO,aACPC,YAAa,YACbC,KAAMC,EAAAA,GAER,OACEtB,EAAAA,cAACuB,EAAAA,EAEC,CACAzB,OAAQ0B,GAERxB,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,SACbD,EAAAA,cAACyB,EAAAA,EAAU,CAACxB,UAAU,WAAWK,QAAQ,IACzCN,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,uBACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,cACXiB,EAAKG,KACJrB,EAAAA,cAAC0B,EAAAA,EAAI,CAACC,GAAG,KACP3B,EAAAA,cAAAA,MAAAA,CAAKC,UCjCC,MDiC2B2B,IAAKV,EAAKG,KAAMQ,IAAKb,EAAcE,EAAKC,UAM3EnB,EAAAA,cAAC0B,EAAAA,EAAI,CAACC,GAAG,KAAKX,EAAcE,EAAKC,SAGrCnB,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,oBAAoBe,EAAcE,EAAKE,gBAGxC,EAiBvB,MAb0D,EAAGf,WAC3D,MAAMyB,EAA6C9B,EAAAA,OAAa,MAChE,OACEA,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAC+B,EAAAA,EAAM,CAACC,SAAS,OAAOF,UAAWA,EAAWG,OAAQjC,EAAAA,cAACe,EAAS,OAC9Df,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QAAQiC,IAAKJ,GAC1B9B,EAAAA,cAACI,EAAAA,EAAQ,CAACC,KAAMA,EAAMC,QAAM,MAG/B,C","sources":["webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.tsx","webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.module.scss","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.tsx","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.module.scss","webpack://ghost-casper/./src/_assets/images/publication-cover.jpg","webpack://ghost-casper/./src/pages/index.tsx","webpack://ghost-casper/./src/pages/styles/Index.module.scss"],"sourcesContent":["import * as React from 'react';\n\nimport * as styles from './HeaderBackground.module.scss';\n\n//import * as PropTypes from 'prop-types';\n\n/* const BackgroundSheet = styled.div`\n  background-color: #000;\n`; */\n\nconst HeaderBackground: React.FC<{\n  srcImg?: string;\n  alt?: string;\n  children?: React.ReactNode;\n}> = ({ srcImg, children }) => {\n  return (\n    <>\n      <div className={styles.siteHeaderBackgroundWrapper}>\n        {srcImg ? (\n          <div className={'outer responsive-header-img' + ' ' + styles.siteHeaderBackground} style={{ backgroundImage: `url(${srcImg})` }}>\n            {children}\n          </div>\n        ) : (\n          <div className={'outer responsive-header-img no-image' + ' ' + styles.siteHeaderBackground}>{children}</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default HeaderBackground;\n\n/*\nHeaderBackground.propTypes = {\n  fluidImg: PropTypes.object,\n  srcImg: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}; */\n","// extracted by mini-css-extract-plugin\nexport var noImage = \"j_S\";\nexport var siteHeaderBackground = \"j_Q\";\nexport var siteHeaderBackgroundWrapper = \"j_R\";","import * as React from 'react';\nimport PostCard from '../PostCard/PostCard';\nimport * as styles from './PostFeed.module.scss';\n\nexport const PostFeed: React.FC<{\n  data: Queries.IndexQuery | Queries.NotFoundQuery | Queries.AuthorQuery | Queries.TagQuery;\n  isHome?: boolean;\n}> = ({ data, isHome }) => {\n  return (\n    <div className={styles.posts}>\n      <div className={styles.postFeed}>\n        {(data?.posts?.nodes as Post_Type[]).map((post: Post_Type, i: number) => {\n          return <PostCard post={post} i={i} key={i} isHome={isHome} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var postFeed = \"g_y\";\nexport var posts = \"g_x\";","export default __webpack_public_path__ + \"static/publication-cover-308a18e57ba247a849320d20f6928413.jpg\";","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '~src/components/Layout/Layout';\nimport Link from '~src/_i18n/components/Link';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\n\nimport HeaderBackground from '~src/components/Layout/Header/HeaderBackground';\nimport { Navigation } from '~src/components/Layout/Navigation/Navigation';\nimport { PostFeed } from '~src/components/Sections/PostFeed/PostFeed';\n\nimport * as styles from './styles/Index.module.scss';\n\nimport siteLogo from '~src/_assets/images/ghost-logo.png';\nimport indexCover from '~src/_assets/images/publication-cover.jpg';\n\nconst IndexHero = () => {\n  const { formatMessage } = useIntlHelper();\n  const site = {\n    title: 'meta.title',\n    description: 'meta.desc',\n    logo: siteLogo,\n  };\n  return (\n    <HeaderBackground\n      //fluidImg={data.indexCover.childImageSharp.fluid}\n      //fixedImg={data.indexCover.childImageSharp.fixed}\n      srcImg={indexCover}\n    >\n      <div className=\"inner\">\n        <Navigation className=\"site-nav\" isHome={true} />\n        <div className=\"site-header-content\">\n          <h1 className=\"site-title\">\n            {site.logo ? (\n              <Link to=\"/\">\n                <img className={styles.siteLogo} src={site.logo} alt={formatMessage(site.title)} />\n                {/* \t\t\t<div className={styles.siteLogoSVG}>\n\t\t\t\t\t\t\t\t\t\t\t<Logo />\n\t\t\t\t\t\t\t\t\t</div> */}\n              </Link>\n            ) : (\n              <Link to=\"/\">{formatMessage(site.title)}</Link>\n            )}\n          </h1>\n          <h2 className=\"site-description\">{formatMessage(site.description)}</h2>\n        </div>\n      </div>\n    </HeaderBackground>\n  );\n};\n\nconst IndexPage: React.FC<{ data: Queries.IndexQuery }> = ({ data }) => {\n  const stickyRef: React.RefObject<HTMLDivElement> = React.useRef(null);\n  return (\n    <>\n      <Layout template=\"home\" stickyRef={stickyRef} header={<IndexHero />}>\n        <div className=\"inner\" ref={stickyRef}>\n          <PostFeed data={data} isHome />\n        </div>\n      </Layout>\n    </>\n  );\n};\n\nexport default IndexPage;\nexport const indexQuery = graphql`\n  query Index($locale: String!) {\n    posts: allMdx(\n      sort: { frontmatter: { date: DESC } }\n      limit: 20\n      filter: { fields: { locale: { eq: $locale } }, frontmatter: { category: { ne: \"Page\" } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\")\n          title\n          featured\n          tags\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n            }\n          }\n          authors {\n            yamlId\n            avatar {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n              }\n            }\n          }\n        }\n        excerpt(pruneLength: 200)\n        timeToRead\n        fields {\n          slug\n        }\n      }\n    }\n    indexCover: file(relativePath: { eq: \"assets/images/publication-cover.jpg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nexport var siteLogo = \"b_b\";\nexport var siteLogoSVG = \"b_c\";"],"names":["srcImg","children","React","className","style","backgroundImage","PostFeed","data","isHome","posts","_data$posts","nodes","map","post","i","PostCard","key","IndexHero","formatMessage","useIntlHelper","site","title","description","logo","siteLogo","HeaderBackground","indexCover","Navigation","Link","to","src","alt","stickyRef","Layout","template","header","ref"],"sourceRoot":""}