{"version":3,"file":"component---src-templates-post-tsx-content-file-path-c-users-mohsen-desktop-dev-dev-starters-ghost-starter-www-posts-fa-using-the-ghost-editor-md-eaec0d562718670dc016.js","mappings":"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","sources":["webpack://ghost-casper/./www/posts/fa/using-the-ghost-editor.md","webpack://ghost-casper/./src/templates/post.tsx","webpack://ghost-casper/./src/components/Layout/Subscribe/SubscribeFooter.tsx","webpack://ghost-casper/./src/components/Sections/MarkdownContent/MarkdownContent.tsx","webpack://ghost-casper/./src/_i18n/components/mdxLink.tsx","webpack://ghost-casper/./src/components/Sections/MarkdownContent/MarkdownContent.module.scss","webpack://ghost-casper/./node_modules/react-intl/lib/src/components/message.js","webpack://ghost-casper/./src/components/Sections/ReadNext/ReadNext.tsx","webpack://ghost-casper/./src/components/Sections/ReadNext/ReadNext.module.scss","webpack://ghost-casper/./src/templates/styles/Post.module.scss","webpack://ghost-casper/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    em: \"em\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    img: \"img\",\n    ol: \"ol\",\n    blockquote: \"blockquote\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Ghost از زبانی به نام ** Markdown ** برای قالب بندی متن استفاده می کند.\"), \"\\n\", React.createElement(_components.p, null, \"وقتی می خواهید برای ویرایش یک نوشته و شخصیت ها و رنگ های خاصی را که بین کلمات در هم تنیده هستند مشاهده کنید ، این میانبرهای Markdown هستند که به Ghost می گویند با کلمات موجود در سند شما چه باید بکند. بزرگترین فایده Markdown این است که می توانید به سرعت تایپ قالب بندی را بدون تایپ و مکث انجام دهید.\"), \"\\n\", React.createElement(_components.p, null, \"در انتهای ویرایشگر ، نوار ابزار با گزینه های اصلی قالب بندی را پیدا خواهید کرد تا به شما در شروع هرچه سریع تر کمک کند. همچنین متوجه خواهید شد که یک نماد **؟ ** وجود دارد که شامل میانبرهای پیشرفته تر است.\"), \"\\n\", React.createElement(_components.p, null, \"در حال حاضر ، هر چند ، اجازه دهید شما را از طریق برخی از اصول اولیه اجرا کنیم. می خواهید مطمئن شوید که این پست را ویرایش می کنید تا تمام Markdown را که ما استفاده کرده ایم ، مشاهده کنید.\"), \"\\n\", React.createElement(_components.h2, null, \"قالب بندی متن\"), \"\\n\", React.createElement(_components.p, null, \"The most common shortcuts are of course, \", React.createElement(_components.strong, null, \"bold\"), \" text, \", React.createElement(_components.em, null, \"italic\"), \" text, and \", React.createElement(_components.a, {\n    href: \"https://example.com\"\n  }, \"hyperlinks\"), \". These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"CMD/Ctrl + B\"), \" for Bold\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"CMD/Ctrl + I\"), \" for Italic\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"CMD/Ctrl + K\"), \" for a Link\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"CMD/Ctrl + H\"), \" for a Heading (Press multiple times for h2/h3/h4/etc)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.\"), \"\\n\", React.createElement(_components.h2, null, \"Inserting images\"), \"\\n\", React.createElement(_components.p, null, \"Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"![Image description](/path/to/image.jpg)\")), \"\\n\", React.createElement(_components.img, {\n    src: \"img/computer.jpg\",\n    alt: \"Computer\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"Important Note:\"), \" Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files \", React.createElement(_components.strong, null, \"before\"), \" uploading them to Ghost.\")), \"\\n\", React.createElement(_components.h2, null, \"Making lists\"), \"\\n\", React.createElement(_components.p, null, \"Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use \", React.createElement(_components.code, null, \"*\"), \" or \", React.createElement(_components.code, null, \"-\"), \" or \", React.createElement(_components.code, null, \"+\"), \". Like this:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Crack the eggs over a bowl\"), \"\\n\", React.createElement(_components.li, null, \"Whisk them together\"), \"\\n\", React.createElement(_components.li, null, \"Make an omelette\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"or\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Remember to buy milk\"), \"\\n\", React.createElement(_components.li, null, \"Feed the cat\"), \"\\n\", React.createElement(_components.li, null, \"Come up with idea for next story\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Adding quotes\"), \"\\n\", React.createElement(_components.p, null, \"When you want to pull out a particularly good excerpt in the middle of a piece, you can use \", React.createElement(_components.code, null, \">\"), \" at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A well placed quote guides a reader through a story, helping them to understand the most important points being made\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.\"), \"\\n\", React.createElement(_components.h2, null, \"Dividing things up\"), \"\\n\", React.createElement(_components.p, null, \"If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping \", React.createElement(_components.code, null, \"---\"), \" on a new line will create a sleek divider, anywhere you want it.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the \", React.createElement(_components.a, {\n    href: \"/advanced-markdown/\"\n  }, \"Advanced Markdown Guide\"), \" - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of \", React.createElement(_components.a, {\n    href: \"/using-tags/\"\n  }, \"how to use Ghost tags\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/Mohsen/Desktop/Dev/_dev/_starters/ghost-starter/www/posts/fa/using-the-ghost-editor.md\";\nimport * as React from 'react';\nimport Layout from '~src/components/Layout/Layout';\nimport Link from '~src/_i18n/components/Link';\nimport AuthorList from '~src/components/Sections/AuthorList/AuthorList';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport ImgSharp from '~src/components/utils/ImgSharp/ImgSharp';\nimport Subscribe from '~src/components/Layout/Subscribe/SubscribeFooter';\nimport ReadNext from '~src/components/Sections/ReadNext/ReadNext';\nimport {MarkdownContent} from '~src/components/Sections/MarkdownContent/MarkdownContent';\nimport * as styles from './styles/Post.module.scss';\nconst PostHero = ({post, stickyRef}) => {\n  const {intl, formatMessage} = useIntlHelper();\n  return React.createElement(\"header\", {\n    className: styles.postFullHeader\n  }, React.createElement(\"div\", {\n    className: \"inner\"\n  }, post.frontmatter.tags && React.createElement(\"section\", {\n    className: styles.postFullTags\n  }, React.createElement(Link, {\n    to: `/tags/${post.frontmatter.tags[0]}/`\n  }, formatMessage('tags.' + post.frontmatter.tags[0] + '.title'))), React.createElement(\"h1\", {\n    ref: stickyRef,\n    className: styles.postFullTitle\n  }, post.frontmatter.title), post.excerpt && React.createElement(\"p\", {\n    className: styles.postFullCustomExcerpt\n  }, post.excerpt), React.createElement(\"div\", {\n    className: styles.postFullByline\n  }, React.createElement(\"section\", {\n    className: styles.postFullBylineContent\n  }, React.createElement(AuthorList, {\n    authors: post.frontmatter.authors,\n    isPost: true\n  }), React.createElement(\"section\", {\n    className: styles.postFullBylineMeta\n  }, React.createElement(\"h4\", {\n    className: \"author-name\"\n  }, post.frontmatter.authors.map((author, i) => React.createElement(React.Fragment, {\n    key: i\n  }, React.createElement(Link, {\n    to: `/authors/${author.id}/`\n  }, formatMessage(`authors.${author.yamlId}.title`)), i !== post.frontmatter.authors.length - 1 && formatMessage(`posts.seperator`) + ' '))), React.createElement(\"div\", null, React.createElement(\"time\", {\n    className: styles.postFullMetaDate,\n    dateTime: post.frontmatter.date\n  }, intl.formatDate(post.frontmatter.date, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })), React.createElement(\"span\", null, React.createElement(\"span\", {\n    className: \"bull\"\n  }, \"\\u2022\"), \" \", intl.formatNumber(post.timeToRead) + ' ', formatMessage('posts.timeToRead'))))))));\n};\nconst PostTemplate = ({data, children}) => {\n  const stickyRef = React.useRef(null);\n  return React.createElement(Layout, {\n    template: \"post\",\n    stickyRef: stickyRef,\n    data: data,\n    readNext: React.createElement(ReadNext, {\n      data: data\n    })\n  }, React.createElement(\"div\", {\n    className: \"inner\"\n  }, React.createElement(\"article\", {\n    className: styles.kgWidthFull\n  }, React.createElement(PostHero, {\n    post: data.post,\n    stickyRef: stickyRef\n  }), React.createElement(\"figure\", {\n    className: styles.postFullImage\n  }, React.createElement(ImgSharp, {\n    className: styles.kgCodeCard,\n    image: data.post.frontmatter.image.childImageSharp.gatsbyImageData,\n    alt: data.post.frontmatter.title\n  })), React.createElement(MarkdownContent, null, children)), React.createElement(Subscribe, null)));\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst PostTemplateQuery = \"4227173509\";\n","import * as React from 'react';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport SubscribeForm from './Subscribe';\nimport * as styles from './Subscribe.module.scss';\n\nconst SubscribeFooter = () => {\n  const { formatMessage } = useIntlHelper();\n  return (\n    <>\n      <section className={styles.subscribeForm}>\n        <h3 className={styles.subscribeFormTitle}> {formatMessage('subscribe.title')}</h3>\n        <p className={styles.subscribeFormDescription}> {formatMessage('subscribe.desc')}</p>\n        <SubscribeForm />\n      </section>\n    </>\n  );\n};\n\nexport default SubscribeFooter;\n","import * as React from 'react';\nimport { MDXProvider } from '@mdx-js/react';\nimport MdxLink from '~src/_i18n/components/mdxLink';\nimport * as styles from './MarkdownContent.module.scss';\n\n// Provide custom components for markdown elements\nconst components = {\n  a: MdxLink,\n\n  //h1: props => <h1 style={{ color: 'tomato' }} {...props} />,\n  //Demo: () => <h1>This is a demo component</h1>,\n};\nexport const MarkdownContent: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return (\n    <section className={styles.postFullContent}>\n      <div className={styles.postContent}>\n        <MDXProvider components={components}>{children}</MDXProvider>\n      </div>\n    </section>\n  );\n};\n","import * as React from 'react';\nimport LocalizedLink from './localizedLink';\n\nconst isHash = (str: string) => /^#/.test(str);\nconst isInternal = (to: string) => /^\\/(?!\\/)/.test(to);\nconst isStatic = (to: string) => /^\\/static/.test(to);\n\n// Only use <LocalizedLink /> for internal links\nconst MdxLink = ({ href, ...props }) =>\n  isHash(href) || !isInternal(href) || isStatic(href) ? (\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" {...props} />\n  ) : (\n    <LocalizedLink {...props} to={href} />\n  );\n\nexport default MdxLink;\n","// extracted by mini-css-extract-plugin\nexport var postContent = \"r_cl\";\nexport var postFullContent = \"r_cm\";","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Link from '~src/_i18n/components/Link';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\n//import { Post } from '~src/types/Post';\nimport PostCard from '../PostCard/PostCard';\nimport * as styles from './ReadNext.module.scss';\n\nexport const ReadNext = ({ data }) => {\n  const relatedPosts = data.relatedPosts;\n  const primaryTag = data.post.frontmatter.tags[0];\n  const { formatMessage, intl } = useIntlHelper();\n  return (\n    <aside className={styles.readNext}>\n      <div className={`inner `}>\n        <div className={styles.readNextFeed}>\n          <article className={styles.readNextCard}>\n            <header className={styles.readNextCardHeader}>\n              <h3>\n                <span>{formatMessage('posts.moreByTag')}</span>{' '}\n                <Link to={`/tags/${primaryTag}/`}>{formatMessage('tags.' + primaryTag + '.title')}</Link>\n              </h3>\n            </header>\n            <div className={styles.readNextCardContent}>\n              <ul>\n                {relatedPosts.nodes.map(post => (\n                  <li key={post.id}>\n                    <h4>\n                      <a href=\"/welcome/\">{post.frontmatter.title}</a>\n                    </h4>\n                    <div className={styles.readNextCardMeta}>\n                      <p>\n                        <time dateTime={post.frontmatter.date}>\n                          {intl.formatDate(post.frontmatter.date, {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                          })}\n                        </time>{' '}\n                        – {intl.formatNumber(post.timeToRead) + ' '}\n                        {formatMessage('posts.timeToRead')}\n                      </p>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <footer className={styles.readNextCardFooter}>\n              <a href={`/tags/${primaryTag}`}>\n                <FormattedMessage id=\"posts.seeAll\" values={{ num: relatedPosts.totalCount }} />\n              </a>\n            </footer>\n          </article>\n          {relatedPosts.nodes.map((post: Post_Type) => (\n            <PostCard isHome={false} post={post} i={0} key={post.id} />\n          ))}\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default ReadNext;\n","// extracted by mini-css-extract-plugin\nexport var postCard = \"q_bN\";\nexport var postCardBylineContent = \"q_bZ\";\nexport var postCardExcerpt = \"q_bX\";\nexport var postCardImage = \"q_bQ\";\nexport var postCardPrimaryTag = \"q_bT\";\nexport var postCardTitle = \"q_bV\";\nexport var readNext = \"q_cc\";\nexport var readNextCard = \"q_cf\";\nexport var readNextCardContent = \"q_cj\";\nexport var readNextCardFooter = \"q_cg\";\nexport var readNextCardHeader = \"q_ch\";\nexport var readNextCardMeta = \"q_ck\";\nexport var readNextFeed = \"q_cd\";\nexport var staticAvatar = \"q_b4\";","// extracted by mini-css-extract-plugin\nexport var authorList = \"k_9\";\nexport var bull = \"k_bc\";\nexport var kgCodeCard = \"k_bf\";\nexport var kgWidthFull = \"k_bd\";\nexport var postFullByline = \"k_7\";\nexport var postFullBylineContent = \"k_8\";\nexport var postFullBylineMeta = \"k_bb\";\nexport var postFullCustomExcerpt = \"k_5\";\nexport var postFullHeader = \"k_1\";\nexport var postFullImage = \"k_6\";\nexport var postFullMetaDate = \"k_3\";\nexport var postFullTags = \"k_2\";\nexport var postFullTitle = \"k_4\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","strong","em","a","ul","li","code","img","ol","blockquote","hr","_provideComponents","components","React","href","src","alt","wrapper","MDXLayout","PostHero","post","stickyRef","intl","formatMessage","useIntlHelper","className","styles","frontmatter","tags","Link","to","ref","title","excerpt","AuthorList","authors","isPost","map","author","i","key","id","yamlId","length","dateTime","date","formatDate","year","month","day","formatNumber","timeToRead","PostTemplate","data","children","Layout","template","readNext","ReadNext","ImgSharp","image","childImageSharp","gatsbyImageData","MarkdownContent","Subscribe","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","SubscribeForm","test","isStatic","target","rel","LocalizedLink","MDXProvider","FormattedMessage","useIntl","_a","textComponent","Text","description","defaultMessage","values","_b","tagName","Component","nodes","ignoreTag","Array","isArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","nextValues","nextOtherProps","relatedPosts","primaryTag","num","totalCount","PostCard","isHome","kgCodeCard","kgWidthFull","postFullByline","postFullBylineContent","postFullBylineMeta","postFullCustomExcerpt","postFullHeader","postFullImage","postFullMetaDate","postFullTags","postFullTitle","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}