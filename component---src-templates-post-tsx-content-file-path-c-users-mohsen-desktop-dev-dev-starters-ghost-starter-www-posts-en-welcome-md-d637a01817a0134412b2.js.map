{"version":3,"file":"component---src-templates-post-tsx-content-file-path-c-users-mohsen-desktop-dev-dev-starters-ghost-starter-www-posts-en-welcome-md-d637a01817a0134412b2.js","mappings":"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","sources":["webpack://ghost-casper/./www/posts/en/welcome.md","webpack://ghost-casper/./src/templates/post.tsx","webpack://ghost-casper/./src/components/Layout/Subscribe/SubscribeFooter.tsx","webpack://ghost-casper/./src/components/Sections/MarkdownContent/MarkdownContent.tsx","webpack://ghost-casper/./src/_i18n/components/mdxLink.tsx","webpack://ghost-casper/./src/components/Sections/MarkdownContent/MarkdownContent.module.scss","webpack://ghost-casper/./node_modules/react-intl/lib/src/components/message.js","webpack://ghost-casper/./src/components/Sections/ReadNext/ReadNext.tsx","webpack://ghost-casper/./src/components/Sections/ReadNext/ReadNext.module.scss","webpack://ghost-casper/./src/templates/styles/Post.module.scss","webpack://ghost-casper/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ol: \"ol\",\n    li: \"li\",\n    p: \"p\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for.\"), \"\\n\", React.createElement(_components.li, null, \"The entire platform can be modified and customised to suit your needs. It's very powerful, but does require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.\"), \"\\n\", React.createElement(_components.li, null, \"For the best experience we recommend downloading the Ghost Desktop App for your computer, which is the best way to access your Ghost site on a desktop device.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our Ghost(Pro) service, and every penny we make is re-invested into funding further development of free, open source technology for modern publishing.\"), \"\\n\", React.createElement(_components.p, null, \"The version of Ghost you are looking at right now would not have been made possible without generous contributions from the open source community.\"), \"\\n\", React.createElement(_components.h2, null, \"Next up, the editor\"), \"\\n\", React.createElement(_components.p, null, \"The main thing you'll want to read about next is probably: the Ghost editor. This is where the good stuff happens.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"By the way, once you're done reading, you can simply delete the default \", React.createElement(_components.strong, null, \"Ghost\"), \" user from your team to remove all of these introductory posts!\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/Mohsen/Desktop/Dev/_dev/_starters/ghost-starter/www/posts/en/welcome.md\";\nimport * as React from 'react';\nimport Layout from '~src/components/Layout/Layout';\nimport Link from '~src/_i18n/components/Link';\nimport AuthorList from '~src/components/Sections/AuthorList/AuthorList';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport ImgSharp from '~src/components/utils/ImgSharp/ImgSharp';\nimport Subscribe from '~src/components/Layout/Subscribe/SubscribeFooter';\nimport ReadNext from '~src/components/Sections/ReadNext/ReadNext';\nimport {MarkdownContent} from '~src/components/Sections/MarkdownContent/MarkdownContent';\nimport * as styles from './styles/Post.module.scss';\nconst PostHero = ({post, stickyRef}) => {\n  const {intl, formatMessage} = useIntlHelper();\n  return React.createElement(\"header\", {\n    className: styles.postFullHeader\n  }, React.createElement(\"div\", {\n    className: \"inner\"\n  }, post.frontmatter.tags && React.createElement(\"section\", {\n    className: styles.postFullTags\n  }, React.createElement(Link, {\n    to: `/tags/${post.frontmatter.tags[0]}/`\n  }, formatMessage('tags.' + post.frontmatter.tags[0] + '.title'))), React.createElement(\"h1\", {\n    ref: stickyRef,\n    className: styles.postFullTitle\n  }, post.frontmatter.title), post.excerpt && React.createElement(\"p\", {\n    className: styles.postFullCustomExcerpt\n  }, post.excerpt), React.createElement(\"div\", {\n    className: styles.postFullByline\n  }, React.createElement(\"section\", {\n    className: styles.postFullBylineContent\n  }, React.createElement(AuthorList, {\n    authors: post.frontmatter.authors,\n    isPost: true\n  }), React.createElement(\"section\", {\n    className: styles.postFullBylineMeta\n  }, React.createElement(\"h4\", {\n    className: \"author-name\"\n  }, post.frontmatter.authors.map((author, i) => React.createElement(React.Fragment, {\n    key: i\n  }, React.createElement(Link, {\n    to: `/authors/${author.id}/`\n  }, formatMessage(`authors.${author.yamlId}.title`)), i !== post.frontmatter.authors.length - 1 && formatMessage(`posts.seperator`) + ' '))), React.createElement(\"div\", null, React.createElement(\"time\", {\n    className: styles.postFullMetaDate,\n    dateTime: post.frontmatter.date\n  }, intl.formatDate(post.frontmatter.date, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })), React.createElement(\"span\", null, React.createElement(\"span\", {\n    className: \"bull\"\n  }, \"\\u2022\"), \" \", intl.formatNumber(post.timeToRead) + ' ', formatMessage('posts.timeToRead'))))))));\n};\nconst PostTemplate = ({data, children}) => {\n  const stickyRef = React.useRef(null);\n  return React.createElement(Layout, {\n    template: \"post\",\n    stickyRef: stickyRef,\n    data: data,\n    readNext: React.createElement(ReadNext, {\n      data: data\n    })\n  }, React.createElement(\"div\", {\n    className: \"inner\"\n  }, React.createElement(\"article\", {\n    className: styles.kgWidthFull\n  }, React.createElement(PostHero, {\n    post: data.post,\n    stickyRef: stickyRef\n  }), React.createElement(\"figure\", {\n    className: styles.postFullImage\n  }, React.createElement(ImgSharp, {\n    className: styles.kgCodeCard,\n    image: data.post.frontmatter.image.childImageSharp.gatsbyImageData,\n    alt: data.post.frontmatter.title\n  })), React.createElement(MarkdownContent, null, children)), React.createElement(Subscribe, null)));\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst PostTemplateQuery = \"4227173509\";\n","import * as React from 'react';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport SubscribeForm from './Subscribe';\nimport * as styles from './Subscribe.module.scss';\n\nconst SubscribeFooter = () => {\n  const { formatMessage } = useIntlHelper();\n  return (\n    <>\n      <section className={styles.subscribeForm}>\n        <h3 className={styles.subscribeFormTitle}> {formatMessage('subscribe.title')}</h3>\n        <p className={styles.subscribeFormDescription}> {formatMessage('subscribe.desc')}</p>\n        <SubscribeForm />\n      </section>\n    </>\n  );\n};\n\nexport default SubscribeFooter;\n","import * as React from 'react';\nimport { MDXProvider } from '@mdx-js/react';\nimport MdxLink from '~src/_i18n/components/mdxLink';\nimport * as styles from './MarkdownContent.module.scss';\n\n// Provide custom components for markdown elements\nconst components = {\n  a: MdxLink,\n\n  //h1: props => <h1 style={{ color: 'tomato' }} {...props} />,\n  //Demo: () => <h1>This is a demo component</h1>,\n};\nexport const MarkdownContent: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return (\n    <section className={styles.postFullContent}>\n      <div className={styles.postContent}>\n        <MDXProvider components={components}>{children}</MDXProvider>\n      </div>\n    </section>\n  );\n};\n","import * as React from 'react';\nimport LocalizedLink from './localizedLink';\n\nconst isHash = (str: string) => /^#/.test(str);\nconst isInternal = (to: string) => /^\\/(?!\\/)/.test(to);\nconst isStatic = (to: string) => /^\\/static/.test(to);\n\n// Only use <LocalizedLink /> for internal links\nconst MdxLink = ({ href, ...props }) =>\n  isHash(href) || !isInternal(href) || isStatic(href) ? (\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" {...props} />\n  ) : (\n    <LocalizedLink {...props} to={href} />\n  );\n\nexport default MdxLink;\n","// extracted by mini-css-extract-plugin\nexport var postContent = \"c_B\";\nexport var postFullContent = \"c_C\";","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Link from '~src/_i18n/components/Link';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\n//import { Post } from '~src/types/Post';\nimport PostCard from '../PostCard/PostCard';\nimport * as styles from './ReadNext.module.scss';\n\nexport const ReadNext = ({ data }) => {\n  const relatedPosts = data.relatedPosts;\n  const primaryTag = data.post.frontmatter.tags[0];\n  const { formatMessage, intl } = useIntlHelper();\n  return (\n    <aside className={styles.readNext}>\n      <div className={`inner `}>\n        <div className={styles.readNextFeed}>\n          <article className={styles.readNextCard}>\n            <header className={styles.readNextCardHeader}>\n              <h3>\n                <span>{formatMessage('posts.moreByTag')}</span>{' '}\n                <Link to={`/tags/${primaryTag}/`}>{formatMessage('tags.' + primaryTag + '.title')}</Link>\n              </h3>\n            </header>\n            <div className={styles.readNextCardContent}>\n              <ul>\n                {relatedPosts.nodes.map(post => (\n                  <li key={post.id}>\n                    <h4>\n                      <a href=\"/welcome/\">{post.frontmatter.title}</a>\n                    </h4>\n                    <div className={styles.readNextCardMeta}>\n                      <p>\n                        <time dateTime={post.frontmatter.date}>\n                          {intl.formatDate(post.frontmatter.date, {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                          })}\n                        </time>{' '}\n                        – {intl.formatNumber(post.timeToRead) + ' '}\n                        {formatMessage('posts.timeToRead')}\n                      </p>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <footer className={styles.readNextCardFooter}>\n              <a href={`/tags/${primaryTag}`}>\n                <FormattedMessage id=\"posts.seeAll\" values={{ num: relatedPosts.totalCount }} />\n              </a>\n            </footer>\n          </article>\n          {relatedPosts.nodes.map((post: Post_Type) => (\n            <PostCard isHome={false} post={post} i={0} key={post.id} />\n          ))}\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default ReadNext;\n","// extracted by mini-css-extract-plugin\nexport var postCard = \"d_G\";\nexport var postCardBylineContent = \"d_N\";\nexport var postCardExcerpt = \"d_L\";\nexport var postCardImage = \"d_K\";\nexport var postCardPrimaryTag = \"d_H\";\nexport var postCardTitle = \"d_J\";\nexport var readNext = \"d_D\";\nexport var readNextCard = \"d_P\";\nexport var readNextCardContent = \"d_S\";\nexport var readNextCardFooter = \"d_Q\";\nexport var readNextCardHeader = \"d_R\";\nexport var readNextCardMeta = \"d_T\";\nexport var readNextFeed = \"d_F\";\nexport var staticAvatar = \"d_M\";","// extracted by mini-css-extract-plugin\nexport var authorList = \"f_D\";\nexport var bull = \"f_G\";\nexport var kgCodeCard = \"f_J\";\nexport var kgWidthFull = \"f_H\";\nexport var postFullByline = \"f_B\";\nexport var postFullBylineContent = \"f_C\";\nexport var postFullBylineMeta = \"f_F\";\nexport var postFullCustomExcerpt = \"f_y\";\nexport var postFullHeader = \"f_t\";\nexport var postFullImage = \"f_z\";\nexport var postFullMetaDate = \"f_w\";\nexport var postFullTags = \"f_v\";\nexport var postFullTitle = \"f_x\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","ol","li","p","h2","blockquote","strong","_provideComponents","components","React","wrapper","MDXLayout","PostHero","post","stickyRef","intl","formatMessage","useIntlHelper","className","styles","frontmatter","tags","Link","to","ref","title","excerpt","AuthorList","authors","isPost","map","author","i","key","id","yamlId","length","dateTime","date","formatDate","year","month","day","formatNumber","timeToRead","PostTemplate","data","children","Layout","template","readNext","ReadNext","ImgSharp","image","childImageSharp","gatsbyImageData","alt","MarkdownContent","Subscribe","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","SubscribeForm","a","href","test","isStatic","target","rel","LocalizedLink","MDXProvider","FormattedMessage","useIntl","_a","textComponent","Text","description","defaultMessage","values","_b","tagName","Component","nodes","ignoreTag","Array","isArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","nextValues","nextOtherProps","relatedPosts","primaryTag","num","totalCount","PostCard","isHome","kgCodeCard","kgWidthFull","postFullByline","postFullBylineContent","postFullBylineMeta","postFullCustomExcerpt","postFullHeader","postFullImage","postFullMetaDate","postFullTags","postFullTitle","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}