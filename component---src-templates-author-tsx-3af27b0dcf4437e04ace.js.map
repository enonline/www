{"version":3,"file":"component---src-templates-author-tsx-3af27b0dcf4437e04ace.js","mappings":"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","sources":["webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.tsx","webpack://ghost-casper/./src/components/Layout/Header/HeaderBackground.module.scss","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.tsx","webpack://ghost-casper/./src/components/Sections/PostFeed/PostFeed.module.scss","webpack://ghost-casper/./src/templates/styles/Author.module.scss","webpack://ghost-casper/./src/templates/author.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport * as styles from './HeaderBackground.module.scss';\n\n//import * as PropTypes from 'prop-types';\n\n/* const BackgroundSheet = styled.div`\n  background-color: #000;\n`; */\n\nconst HeaderBackground: React.FC<{\n  srcImg?: string;\n  alt?: string;\n  children?: React.ReactNode;\n}> = ({ srcImg, children }) => {\n  return (\n    <>\n      <div className={styles.siteHeaderBackgroundWrapper}>\n        {srcImg ? (\n          <div className={'outer responsive-header-img' + ' ' + styles.siteHeaderBackground} style={{ backgroundImage: `url(${srcImg})` }}>\n            {children}\n          </div>\n        ) : (\n          <div className={'outer responsive-header-img no-image' + ' ' + styles.siteHeaderBackground}>{children}</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default HeaderBackground;\n\n/*\nHeaderBackground.propTypes = {\n  fluidImg: PropTypes.object,\n  srcImg: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}; */\n","// extracted by mini-css-extract-plugin\nexport var noImage = \"j_S\";\nexport var siteHeaderBackground = \"j_Q\";\nexport var siteHeaderBackgroundWrapper = \"j_R\";","import * as React from 'react';\nimport PostCard from '../PostCard/PostCard';\nimport * as styles from './PostFeed.module.scss';\n\nexport const PostFeed: React.FC<{\n  data: Queries.IndexQuery | Queries.NotFoundQuery | Queries.AuthorQuery | Queries.TagQuery;\n  isHome?: boolean;\n}> = ({ data, isHome }) => {\n  return (\n    <div className={styles.posts}>\n      <div className={styles.postFeed}>\n        {(data?.posts?.nodes as Post_Type[]).map((post: Post_Type, i: number) => {\n          return <PostCard post={post} i={i} key={i} isHome={isHome} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var postFeed = \"h_P\";\nexport var posts = \"h_N\";","// extracted by mini-css-extract-plugin\nexport var authorHeader = \"d_k\";\nexport var authorHeaderContent = \"d_l\";\nexport var authorLocation = \"d_r\";\nexport var authorMeta = \"d_n\";\nexport var authorProfileImage = \"d_j\";\nexport var authorSocialLink = \"d_q\";\nexport var authorStats = \"d_s\";\nexport var siteHeaderContent = \"d_m\";\nexport var socialLink = \"d_p\";","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport useIntlHelper from '~src/_i18n/helpers/useIntlHelper';\nimport * as cx from 'classnames';\nimport Layout from '~src/components/Layout/Layout';\nimport HeaderBackground from '~src/components/Layout/Header/HeaderBackground';\nimport { PostFeed } from '~src/components/Sections/PostFeed/PostFeed';\nimport AvatarIcon from '~src/_assets/icons/general/avatar-icon';\nimport * as styles from './styles/Author.module.scss';\n\nconst AuthorHero = ({ data, posts }) => {\n  const { formatMessage } = useIntlHelper();\n\n  const twitterUrl = data.author.twitter ? `https://twitter.com/${data.author.twitter.replace(/^@/, ``)}` : null;\n  const facebookUrl = data.author.facebook ? `https://www.facebook.com/${data.author.facebook.replace(/^\\//, ``)}` : null;\n  return (\n    <header className=\"site-archive-header\">\n      <HeaderBackground srcImg={data.author.cover.childImageSharp.gatsbyImageData.images.fallback.src}>\n        <div className=\"inner\">\n          <div className={cx(styles.siteHeaderContent, styles.authorHeader)}>\n            {data.author.avatar ? (\n              <img\n                className={styles.authorProfileImage}\n                src={data.author.avatar.childImageSharp.gatsbyImageData.images.fallback.src}\n                alt={data.author.name}\n              />\n            ) : (\n              <div className={styles.authorProfileImage}>\n                <AvatarIcon />\n              </div>\n            )}\n            <div className={styles.authorHeaderContent}>\n              <h1 className=\"site-title\">{formatMessage(`authors.${data.author.yamlId}.title`)}</h1>\n              {data.author.bio && <h2 className=\"author-bio\">{formatMessage(`authors.${data.author.yamlId}.bio`)}</h2>}\n              <div className={styles.authorMeta}>\n                {data.author.location && (\n                  <div className={styles.authorLocation}>{formatMessage(`authors.${data.author.yamlId}.location`)}</div>\n                )}\n                <div className={styles.authorStats}>\n                  {(posts.nodes.length && ` ${posts.nodes.length} post${1 < posts.nodes.length && `s`}`) || `No posts`}\n                </div>\n                {data.author.website && (\n                  <span className={styles.authorSocialLink}>\n                    <a href={data.author.website} target=\"_blank\" rel=\"noopener noreferrer\">\n                      Website\n                    </a>\n                  </span>\n                )}\n                {twitterUrl && (\n                  <span className={styles.authorSocialLink}>\n                    <a href={twitterUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                      Twitter\n                    </a>\n                  </span>\n                )}\n                {facebookUrl && (\n                  <span className={styles.authorSocialLink}>\n                    <a href={facebookUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                      Facebook\n                    </a>\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </HeaderBackground>\n    </header>\n  );\n};\n\nconst AuthorTemplate: React.FC<{ data: Queries.AuthorQuery }> = ({ data }: PageProps<Queries.AuthorQuery>) => {\n  return (\n    <Layout template=\"author\" data={data} header={<AuthorHero data={data} posts={data.posts} />}>\n      <div className=\"inner\">\n        <PostFeed data={data} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default AuthorTemplate;\n\nexport const AuthorTemplateQuery = graphql`\n  query Author($id: String!, $locale: String!) {\n    author: authorsYaml(yamlId: { eq: $id }) {\n      yamlId\n      bio\n      location\n      facebook\n      twitter\n      avatar {\n        childImageSharp {\n          gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n        }\n      }\n      cover {\n        childImageSharp {\n          gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n        }\n      }\n      id\n    }\n    posts: allMdx(filter: { fields: { locale: { eq: $locale } }, frontmatter: { authors: { elemMatch: { yamlId: { eq: $id } } } } }) {\n      nodes {\n        frontmatter {\n          featured\n          date(formatString: \"DD MMMM YYYY\")\n          title\n          tags\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n            }\n          }\n          authors {\n            yamlId\n            avatar {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, placeholder: TRACED_SVG)\n              }\n            }\n          }\n        }\n        fields {\n          slug\n        }\n        excerpt(pruneLength: 200)\n        timeToRead\n      }\n    }\n  }\n`;\n"],"names":["srcImg","children","React","className","style","backgroundImage","PostFeed","data","isHome","posts","_data$posts","nodes","map","post","i","PostCard","key","authorSocialLink","AuthorHero","formatMessage","useIntlHelper","twitterUrl","author","twitter","replace","facebookUrl","facebook","HeaderBackground","cover","childImageSharp","gatsbyImageData","images","fallback","src","cx","avatar","alt","name","AvatarIcon","yamlId","bio","location","length","website","styles","href","target","rel","Layout","template","header"],"sourceRoot":""}